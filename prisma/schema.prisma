// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Article {
  id        String @id @default(cuid())
  title     String
  content   String
  date      String
  image_url String @map("image")
  // topic --> should be an enum, SQLite doesn't support it

  author   Author @relation(fields: [authorId], references: [id])
  authorId String

  Comments Comment[]
}

model Author {
  id          String    @id @default(cuid())
  name        String
  slug        String
  description String
  job_title   String
  topics      String
  image_url   String
  articles    Article[]
}

model Comment {
  id      String @id @default(cuid())
  content String

  commenter   User   @relation(fields: [commenterId], references: [id])
  commenterId String

  article   Article @relation(fields: [articleId], references: [id])
  articleId String

  parent   Comment? @relation("replies", fields: [parentId], references: [id])
  parentId String

  children Comment[] @relation("replies")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Comments      Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
